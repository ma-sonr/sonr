syntax = "proto3";

package sonrio.sonr.schema;

option go_package = "github.com/sonr-io/sonr/x/schema/types";
option java_multiple_files = true;
option java_package = "io.sonr.types.schema";

// Defines a schema and additional metadata related to the definition
message SchemaDefinition {
  // The DID for this schema should not be populated by request
  string did = 1;

  // The Creator address for the schema (from the wallet)
  string creator = 2;

  // an alternative reference point
  string label = 3;

  // the properties of this schema
  repeated SchemaKindDefinition fields = 4;
}


// Defines key value pairs for indexable metadata related to the schema
message MetadataDefintion {
  // metadata key
  string key = 1;

  // metadata value
  string value = 2;
}

/*
  Defines the "kind" of an item within a collection for a SchemaKind that is "LIST"
  Definition is recurssive to allow nesting of definitions
*/
message SchemaItemKindDefinition {
  // Type of the item contained within the collection, must be of type SchemaKind
  SchemaKind field = 1;

  // Type of an item if field is of type list. usage is for defining multidimensional collections.
  SchemaItemKindDefinition item = 2;

  // Type of link for the given item for schemas, type should be SCHEMA fields of type LINK
  LinkKind link_kind = 3;

  // String to denote URI for Link, should be defined if field is of type 'LINK'
  string link = 4;
}

//  Defines a type for a given property within a Schema types conform to the IPLD Kind defintion https://ipld.io/docs/data-model/kinds/
message SchemaKindDefinition {
  // Name of the property
  string name = 1;

  // Type of a single schema property
  SchemaKind field = 2;

  // Optional field for a link context if `SchemaKind` is of type `Link`
  LinkKind link_kind = 3;

  // String to denote URI for Link, should be defined if field is of type 'LINK'
  string link = 4;

  // optional field if field is of Kind List to define item types.
  SchemaItemKindDefinition item = 5;
}

enum LinkKind {
  UNKNOWN = 0;
  OBJECT = 1;
  SCHEMA = 2;
  BUCKET = 3;
}

enum SchemaKind {
  LIST = 0;
  BOOL = 1;
  INT = 2;
  FLOAT = 3;
  STRING = 4;
  BYTES = 5;
  LINK = 6;
  ANY = 7;
}


message SchemaDocument {
  // the DID for this schema should not be populated by request
  string did = 1;

  string cid = 2;

  string creator = 3;

  // The definition of the document used to build the values
  SchemaDefinition definition = 4;

  // the properties of this schemadocument
  repeated SchemaDocumentValue fields = 5;
}


message BoolValue {
    bool value = 1;
}

message StringValue {
    string value = 1;
}

message IntValue {
    int32 value = 1;
}

message FloatValue {
    double value = 1;
}

message BytesValue {
    bytes value = 1;
}

message LinkValue {
    LinkKind link = 1;
    string value = 2;
}

message ArrayValue {
    repeated SchemaDocumentValue value = 1;
}


message SchemaDocumentValue {
    string name = 1;
    // Type of a single schema property
    SchemaKind field = 2;

    // The value of the field
    BoolValue bool_value = 3; // optional
    StringValue string_value = 4; // optional
    IntValue int_value = 5; // optional
    FloatValue float_value = 6; // optional
    BytesValue bytes_value = 7; // optional
    LinkValue link_value = 8; // optional
    ArrayValue array_value = 9; // optional
}
