syntax = "proto3";

// Package Motor is used for defining a Motor node and its properties.
package sonrio.motor.api.v1;

import "bucket/where_is.proto";
import "common/v1/info.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "schema/v1/schema.proto";

option go_package = "github.com/sonr-io/sonr/third_party/types/motor/api/v1";
option java_multiple_files = true;
option java_package = "io.sonr.types.motor";

// -----------------------------------------------------------------------------
// Motor Node API
// -----------------------------------------------------------------------------
// (Client) InitializeRequest Message to Establish Sonr Host/API/Room
message InitializeRequest {
  // Identifier of this Device
  string device_id = 1;

  // Device Home Directory
  string home_dir = 2;

  // Device Library Support Directory
  string support_dir = 3;

  // Device Temporary Storage Directory
  string temp_dir = 4;

  // Enable Libp2p Host
  bool enable_host = 5;

  // Enable Discovery Service
  bool enable_discovery = 6;

  // Enable Query Clients
  bool enable_query = 7;

  // Discovery Latitude
  double discovery_latitude = 8; //optional - Default: 40.673010 (Sonr HQ)

  // Discovery Longitude
  double discovery_longitude = 9; //optional - Default: -73.994450 (Sonr HQ)

  // Public Key used for Device Authentication as DID Controller
  common.v1.AuthInfo auth_info = 10; // optional

  // Application DID
  string app_did = 11; // optional
}

// CreateAccount Request contains the three keys needed to create an account on Sonr
message CreateAccountRequest {
  string password = 1;
  map<string, string> metadata = 2;
}

// CreateAccountWithKeyRequest allows the DSC to be specified manually when creating a request.
// Necessary for android (for now)
message CreateAccountWithKeysRequest {
  string password = 1;
  bytes aes_dsc_key = 2;
  bytes aes_psk_key = 3;
  map<string, string> metadata = 4;
}

// Login requires the DID of the account being logged into,
// and optionally a password if the vault pw is being used
// The PSK and DSC will be fetched from the keychain
message LoginRequest {
  string did = 1;
  string password = 2;
}

message LoginWithKeysRequest {
  string did = 1;
  string password = 2;
  bytes aes_dsc_key = 3;
  bytes aes_psk_key = 4;
}

message QueryRequest {
  string query = 1;
  common.v1.EntityKind kind = 2;
  common.v1.BlockchainModule module = 3;
}

message PaymentRequest {
  string to = 1;
  string from = 2;
  int64 amount = 3;
  string memo = 4;
}


// -----------------------------------------------------------------------------
// Registry Models
// -----------------------------------------------------------------------------
message QueryWhoIsRequest {
  string did = 1;
}

// -----------------------------------------------------------------------------
// Schema Models
// -----------------------------------------------------------------------------
message CreateSchemaRequest {
  string label = 1;
  map<string, sonrio.sonr.schema.SchemaKind> fields = 2;
  map<string, string> metadata = 3;
}

message QueryWhatIsRequest {
  string creator = 1;
  string did = 2;
}

message QueryWhatIsByCreatorRequest {
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QuerySchemaRequest {
  string creator = 1;
  string did = 2;
}

// -----------------------------------------------------------------------------
// Bucket Models
// -----------------------------------------------------------------------------
message QueryWhereIsRequest {
  string creator = 1;
  string did = 2;
}

message QueryWhereIsByCreatorRequest {
  string creator = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message CreateBucketRequest {
  string creator = 1;
  string label = 2;
  sonrio.sonr.bucket.BucketVisibility visibility = 3;
  sonrio.sonr.bucket.BucketRole role = 4;
  repeated sonrio.sonr.bucket.BucketItem content = 5;
}

message UpdateBucketRequest {
  string creator = 1;
  string did = 2;
  string label = 3;
  sonrio.sonr.bucket.BucketVisibility visibility = 4;
  sonrio.sonr.bucket.BucketRole role = 5;
  repeated sonrio.sonr.bucket.BucketItem content = 6;
}

message SeachBucketContentBySchemaRequest {
  // Address of bucket owner
  string creator = 1;
  // bucket identifier
  string bucket_did = 2;
  // schema identifier
  string schema_did = 3;
}

message StatRequest {
}

message UploadDocumentRequest {
  string creator = 1;

  string label = 2;

  // The definition of the document used to build the values
  sonrio.sonr.schema.SchemaDefinition definition = 3;

  // the properties of this schemadocument
  repeated sonrio.sonr.schema.SchemaDocumentValue fields = 4;
}

message GetDocumentRequest {
  string cid = 1;
}
